---
apiVersion: template.openshift.io/v1
kind: Template
metadata:
  name: opensearch-dashboards-proxy
objects:
- apiVersion: v1
  kind: ConfigMap
  metadata:
    name: opensearch-dashboards-proxy
    annotations:
      qontract.recycle: "true"
  data:
    nginx.conf.tpl: |-
      worker_processes 1;
      daemon off;
      error_log /dev/stdout;
      events {
          worker_connections ${WORKER_CONNECTIONS};
      }

      http {
        server_names_hash_bucket_size ${SERVER_NAMES_HASH_BUCKET_SIZE};
        access_log /dev/stdout;
        resolver __NAMESERVER__ valid=${RESOLVER_VALID};
        server {
          listen 8080 default_server;
          location / {
            access_log off;
            default_type text/plain;
            return 200 "healthy\n";
          }
        }
        server {
          listen 8080;
          server_name ${HOST};
          rewrite ^/$ https://${HOST}/_dashboards redirect;

          location /_dashboards {
              # Forward requests to Dashboards
              proxy_pass ${ES_ENDPOINT};

              # Response buffer settings
              proxy_buffer_size 128k;
              proxy_buffers 4 256k;
              proxy_busy_buffers_size 256k;
          }
        }
      }
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      run: opensearch-dashboards-proxy
    name: opensearch-dashboards-proxy
  spec:
    replicas: ${{REPLICAS}}
    selector:
      matchLabels:
        run: opensearch-dashboards-proxy
    template:
      metadata:
        labels:
          run: opensearch-dashboards-proxy
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                  - key: run
                    operator: In
                    values:
                    - opensearch-dashboards-proxy
                topologyKey: topology.kubernetes.io/zone
              weight: 50
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                  - key: run
                    operator: In
                    values:
                    - opensearch-dashboards-proxy
                topologyKey: kubernetes.io/hostname
              weight: 1
        serviceAccountName: opensearch-dashboards-proxy
        containers:
        - name: oauth-proxy
          image: ${OAUTH_PROXY_IMAGE_NAME}:${OAUTH_PROXY_IMAGE_TAG}
          imagePullPolicy: IfNotPresent
          ports:
          - containerPort: 3000
            name: https
            protocol: TCP
          resources:
            requests:
              cpu: 20m
              memory: 50Mi
            limits:
              cpu: 50m
              memory: 100Mi
          readinessProbe:
            failureThreshold: 3
            periodSeconds: 10
            successThreshold: 1
            httpGet:
              path: /oauth/healthz
              port: https
              scheme: HTTPS
            timeoutSeconds: 1
            initialDelaySeconds: 10
          livenessProbe:
            failureThreshold: 3
            periodSeconds: 10
            successThreshold: 1
            httpGet:
              path: /oauth/healthz
              port: https
              scheme: HTTPS
            timeoutSeconds: 1
            initialDelaySeconds: 10
          args:
          - --https-address=:3000
          - --provider=openshift
          - --openshift-service-account=opensearch-dashboards-proxy
          - --upstream=http://localhost:8080
          - --tls-cert=/etc/tls/private/tls.crt
          - --tls-key=/etc/tls/private/tls.key
          - --cookie-secret-file=/var/run/secrets/kubernetes.io/serviceaccount/token
          volumeMounts:
          - mountPath: /etc/tls/private
            name: nginx-tls
        - image: ${NGINX_IMAGE_NAME}:${NGINX_IMAGE_TAG}
          command:
          - /bin/sh
          - -c
          args:
          - >
            NAMESERVER=`grep nameserver /etc/resolv.conf | head -n 1 | cut -d " " -f 2` &&
            sed -e "s/__NAMESERVER__/$NAMESERVER/" /etc/nginx/nginx.conf.tpl > /run/nginx.conf &&
            nginx -c /run/nginx.conf
          name: nginx-proxy
          resources:
            requests:
              cpu: 100m
              memory: 128Mi
            limits:
              cpu: 200m
              memory: 256Mi
          ports:
          - containerPort: 8080
            name: http
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            periodSeconds: 10
            successThreshold: 1
            httpGet:
              path: /
              port: http
              scheme: HTTP
            timeoutSeconds: 1
            initialDelaySeconds: 10
          livenessProbe:
            failureThreshold: 3
            periodSeconds: 10
            successThreshold: 1
            httpGet:
              path: /
              port: http
              scheme: HTTP
            timeoutSeconds: 1
            initialDelaySeconds: 10
          volumeMounts:
          - name: nginx-conf
            mountPath: /etc/nginx/nginx.conf.tpl
            subPath: nginx.conf.tpl
          - name: nginx-cache
            mountPath: /var/cache/nginx
          - name: nginx-run
            mountPath: /var/run
        volumes:
        - name: nginx-conf
          configMap:
            name: opensearch-dashboards-proxy
        - name: nginx-cache
          emptyDir: {}
        - name: nginx-run
          emptyDir: {}
        - name: nginx-tls
          secret:
            secretName:  opensearch-dashboards-proxy-tls
- apiVersion: v1
  kind: Service
  metadata:
    name: opensearch-dashboards-proxy
    annotations:
      service.alpha.openshift.io/serving-cert-secret-name: opensearch-dashboards-proxy-tls
  spec:
    ports:
    - name: https
      port: 3000
      protocol: TCP
      targetPort: https
    selector:
      run: opensearch-dashboards-proxy
    sessionAffinity: ClientIP
    sessionAffinityConfig:
      clientIP:
        timeoutSeconds: 10800
- apiVersion: route.openshift.io/v1
  kind: Route
  metadata:
    annotations:
      cert-manager.io/issuer-kind: ${{CERT_MANAGER_ISSUER_KIND}}
      cert-manager.io/issuer-name: ${{CERT_MANAGER_ISSUER_NAME}}
    name: opensearch-dashboards-proxy
  spec:
    host: ${HOST}
    port:
      targetPort: https
    to:
      kind: Service
      name: opensearch-dashboards-proxy
      weight: 100
    tls:
      termination: reencrypt
      insecureEdgeTerminationPolicy: Redirect
- apiVersion: v1
  kind: ServiceAccount
  metadata:
    name: opensearch-dashboards-proxy
    annotations:
      serviceaccounts.openshift.io/oauth-redirectreference.primary: '{"kind":"OAuthRedirectReference","apiVersion":"v1","reference":{"kind":"Route","name":"opensearch-dashboards-proxy"}}'
  imagePullSecrets:
  - name: ${IMAGE_PULL_SECRET_NAME}
parameters:
- name: IMAGE_TAG
  value: dummy # needed because saasherder will fail if this parameter doesn't exist.
- name: REPLICAS
  value: "1"
- name: NGINX_IMAGE_NAME
  value: quay.io/app-sre/nginx
- name: NGINX_IMAGE_TAG
  value: "1.17.9"
- name: WORKER_CONNECTIONS
  value: "1024"
- name: SERVER_NAMES_HASH_BUCKET_SIZE
  value: "128"
- name: HOST
  required: true
- name: ES_ENDPOINT
  required: true
- name: OAUTH_PROXY_IMAGE_NAME
  value: quay.io/openshift/origin-oauth-proxy
- name: OAUTH_PROXY_IMAGE_TAG
  value: "4.4.0"
- name: RESOLVER_VALID
  value: "30s"
- name: IMAGE_PULL_SECRET_NAME
  value: quay.io
- name: CERT_MANAGER_ISSUER_KIND
  value: ClusterIssuer
- name: CERT_MANAGER_ISSUER_NAME
  value: letsencrypt-prod-http
